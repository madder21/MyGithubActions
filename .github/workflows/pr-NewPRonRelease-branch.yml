# Unique name for this workflow
Not another CI tool (beta)
FREE Auto-generated CI/CD pipelines for SFDX's org development modelâ€”by Pablo Gonzalez

CI/CD Details
CI/CD Provider
Select the CI provider your remote git repository is connected to


GitHub Actions
Job name
Describe what in just a few words is you are automating, i.e "Deployment to UAT" or "Validate deployment when PR is created."

Automatic PR Validation
Authentication
Org authentication method
Your pipeline configuration script needs to authenticate to your target Salesforce org without any manual user interaction. You can use two methods:


1) You can use the sfdx url generated from visual studio code. This is very easy and recommended


2) You can use the JSON web token flow (JWT). This requires you to create a connecte app in each target org and create a certificate.


Regardless of which method you use, you will end up with a set of parameters that need to be passed to the Salesforce CLI for authentication. You must generate those parameters (see links above) and then come back to this step.



Sfdx URL (recommended)
Now that you've generated the authentication parameters, you must stored them as environment variables or secrets in your CI server. Once you've done that, you need to enter the name of those secrets in the fields below.


Do not provide the actual values. Provide the names of the secrets that hold these values.

SFDX URL CI secret
SFDX URL CI SECRET
Automation
Job type
Here you specify what it is you want to automate in your release process against the target org


Validate deployment
Deployment type
You can deploy the entire metadata in the sfdx project or only the metadata that has been created/updated since the last commit (similar to using change sets).


Deploy delta (changed files)
Event
Now, decide when you want to validate a deployment. The trigger is an event that happens in your remote git repository.


Pull request is opened/updated
Target branches
Do you want this pipeline to run when a pull_request happens on any branch? If not, write down the names of the specific branches that are relevant to this automation. You can enter multiple branches separted by a comma

Release-Candidate, main
Run when changes are made to these paths
When using the push and pull request events, you can configure a workflow to run based on what file paths are changed. By default, we are tracking changes inside the force-app/** directory; the standard sfdx directory.

force-app/**
Checks
Run apex tests
You can run all apex tests in the org or tests specified by the developer in the pull request body.


Run all tests
Static Code Analysis (PMD)

 Enable
Choose which PMD Categories you wish to analyse.


 Design
 Best Practices
 Performance
 Code Style
 Security

Congrats! You just saved hours of research and typing!
name: Automatic PR Validation
on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - force-app/**
    branches:
      - Release-Candidate
      - " main"
jobs:
  automatic-pr-validation:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "14"
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Salesforce CLI
        run: >
          wget
          https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz

          mkdir ~/sfdx

          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1

          echo "$HOME/sfdx/bin" >> $GITHUB_PATH

          ~/sfdx/bin/sfdx version
      - name: Populate auth file with SFDX_URL secret of target org
        run: |
          echo ${{ secrets.SFDX URL CI SECRET}} > ./SFDX URL CI SECRET.txt
      - name: Authenticate to target Org
        run: sfdx auth:sfdxurl:store -f ./SFDX URL CI SECRET.txt -s -a targetOrg
      - name: Installing sfdx git delta
        run: |
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins 
      - name: Create delta packages for new, modified or deleted metadata
        run: >
          mkdir changed-sources

          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 
      - name: Installing java
        run: sudo apt-get update && sudo apt-get install default-jdk
      - name: Installing SFDX scanner
        run: sfdx plugins:install @salesforce/sfdx-scanner
      - name: Scan code
        run: sfdx scanner:run --format sarif --target 'changed-sources/**/*.cls'
          --category 'Security,Code Style,Performance,Best Practices,Design'
          --outfile 'apexScanResults.sarif'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: changed-sources/apexScanResults.sarif
      - name: Deployment - run specified tests
        if: ${{ env.APEX_TESTS != 'all' }}
        run: >
          echo ${{env.APEX_TESTS}}

          sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
      - name: Deployment - run all tests
        if: ${{ env.APEX_TESTS == 'all' }}
        run: >
          echo ${{env.APEX_TESTS}}

          sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests --json
