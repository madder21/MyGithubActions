name: Validate and Deploy in INT/UAT

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'force-app/**'
      - 'pmd/**'
    branches:
      - master

jobs:
  pmd-run:
    runs-on: ubuntu-latest
    outputs:
      pmd_status: ${{ steps.set-result.outputs.status }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install PMD
        run: |
          PMD_VERSION=$(cat pmd/pmd-version.txt)
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
          unzip pmd-bin-$PMD_VERSION.zip -d ~
          mv ~/pmd-bin-$PMD_VERSION ~/pmd
          ~/pmd/bin/run.sh pmd --version

      - name: Run PMD scan
        id: pmd-scan
        run: |
          mkdir -p reports
          echo "Problem,Package,File,Priority,Line,Description,Rule,Ruleset" > reports/pmd-results.csv

          if [ -z "$(find ./force-app/main/default/classes -type f -name '*.cls')" ]; then
            echo "No .cls files found"
          else
            find ./force-app/main/default/classes -type f -name '*.cls'
          fi

          ~/pmd/bin/run.sh pmd -d ./force-app/main/default/classes -R pmd/ruleset.xml -f csv --force-language apex >> reports/pmd-results.csv || echo "PMD exited with non-zero status"

      - name: Set PMD result output
        id: set-result
        run: |
          if [ -f reports/pmd-results.csv ] && [ $(wc -l < reports/pmd-results.csv) -gt 1 ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Upload PMD report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pmd-report
          path: reports/pmd-results.csv

  validate-and-deploy-int:
    needs: pmd-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Salesforce CLI
        run: |
          npm install --global @salesforce/cli
          sf --version

      - name: Authenticate using JWT
        run: |
          echo "${{ secrets.SFDC_AUTH_KEY }}" > server.key
          sf org login jwt \
            --client-id "${{ secrets.SFDX_INT_CLIENT_ID }}" \
            --jwt-key-file server.key \
            --username "${{ secrets.SFDX_INT_USERNAME }}" \
            --instance-url "${{ secrets.SFDC_URL_BASE }}" \
            --alias prod-org \
            --set-default

      - name: Read Test Class Names from File
        id: test-classes
        run: |
          TEST_CLASSES=$(tr '\n' ',' < specifiedTestsClass/testsToRun.txt | sed 's/,$//')
          echo "TEST_CLASSES=$TEST_CLASSES" >> $GITHUB_OUTPUT

      - name: Validate and optionally deploy
        run: |
          echo "Starting validation (dry run)..."
          set -e

          VALIDATION_OUTPUT=$(sf project deploy start \
            --manifest manifest/package.xml \
            --test-level RunSpecifiedTests \
            --tests "${{ steps.test-classes.outputs.TEST_CLASSES }}" \
            --target-org prod-org \
            --wait 30 \
            --dry-run \
            --json)

          echo "$VALIDATION_OUTPUT" > validation-result.json

          echo "File Path,Component Type,Full Name,Problem Type,Problem" > validation-results.csv
          echo "$VALIDATION_OUTPUT" | jq -r '
            .result.details.componentFailures[]? |
            [.fileName, .componentType, .fullName, .problemType, .problem] |
            @csv' >> validation-results.csv

          echo "Starting deployment..."
          sf project deploy start \
            --manifest manifest/package.xml \
            --test-level RunSpecifiedTests \
            --tests "${{ steps.test-classes.outputs.TEST_CLASSES }}" \
            --target-org prod-org \
            --wait 30
          echo "Deployment completed."

  validate-and-deploy-uat:
    needs: pmd-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Salesforce CLI
        run: |
          npm install --global @salesforce/cli
          sf --version

      - name: Authenticate using JWT
        run: |
          echo "${{ secrets.SFDC_AUTH_KEY }}" > server.key
          sf org login jwt \
            --client-id "${{ secrets.SFDX_INT_CLIENT_ID }}" \
            --jwt-key-file server.key \
            --username "${{ secrets.SFDX_INT_USERNAME }}" \
            --instance-url "${{ secrets.SFDC_URL_BASE }}" \
            --alias prod-org \
            --set-default

      - name: Read Test Class Names from File
        id: test-classes
        run: |
          TEST_CLASSES=$(tr '\n' ',' < specifiedTestsClass/testsToRun.txt | sed 's/,$//')
          echo "TEST_CLASSES=$TEST_CLASSES" >> $GITHUB_OUTPUT

      - name: Validate and optionally deploy
        run: |
          echo "Starting validation (dry run)..."
          set -e

          VALIDATION_OUTPUT=$(sf project deploy start \
            --manifest manifest/package.xml \
            --test-level RunSpecifiedTests \
            --tests "${{ steps.test-classes.outputs.TEST_CLASSES }}" \
            --target-org prod-org \
            --wait 30 \
            --dry-run \
            --json)

          echo "$VALIDATION_OUTPUT" > validation-result.json

          echo "File Path,Component Type,Full Name,Problem Type,Problem" > validation-results.csv
          echo "$VALIDATION_OUTPUT" | jq -r '
            .result.details.componentFailures[]? |
            [.fileName, .componentType, .fullName, .problemType, .problem] |
            @csv' >> validation-results.csv

          echo "Starting deployment..."
          sf project deploy start \
            --manifest manifest/package.xml \
            --test-level RunSpecifiedTests \
            --tests "${{ steps.test-classes.outputs.TEST_CLASSES }}" \
            --target-org prod-org \
            --wait 30
          echo "Deployment completed."

      - name: Archive package.xml with date
        if: success()
        run: |
          mkdir -p manifest/PendingProdManifests
          DATE=$(date +%d%m%Y)
          BASE_NAME="package${DATE}.xml"
          ARCHIVE_DIR="manifest/PendingProdManifests"
          DEST_PATH="${ARCHIVE_DIR}/${BASE_NAME}"

          COUNT=0
          while [ -e "$DEST_PATH" ]; do
            COUNT=$((COUNT + 1))
            DEST_PATH="${ARCHIVE_DIR}/package${DATE}_V${COUNT}.xml"
          done

          mv manifest/package.xml "$DEST_PATH"
          echo "Moved and renamed package.xml to $DEST_PATH"

          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Actions"
          git add "$DEST_PATH"
          git commit -m "Archive deployed package.xml on $DATE"
          git push
