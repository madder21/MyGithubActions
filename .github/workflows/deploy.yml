name: Manual Workflow Deploy + PR Check

on:
  # workflow_dispatch:
  #   inputs:
  #     environment:
  #       type: choice
  #       description: Which environment to deploy to
  #       options:
  #         - integrate-sandbox
  #         - uat-partial-sandbox
  #         - production
  #       default: 'integrate-sandbox'
  #       required: true
  #     validateOnly:
  #       description: 'Run the deployment as validation only'
  #       type: boolean
  #       default: false
  #     pmdRequired:
  #       description: 'Block deployment if PMD fails'
  #       type: boolean
  #       default: true

  workflow_dispatch:
  pull_request:
    paths:
      - 'force-app/**'
      - 'pmd/**'
    branches:
      - main
      - master
      - develop
      - release/**

jobs:
  pmd-run:
    runs-on: ubuntu-latest
    outputs:
      pmd_status: ${{ steps.set-result.outputs.status }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install PMD
        run: |
          PMD_VERSION=$(cat pmd/pmd-version.txt)
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
          unzip pmd-bin-$PMD_VERSION.zip -d ~
          mv ~/pmd-bin-$PMD_VERSION ~/pmd
          ~/pmd/bin/run.sh pmd --version

      - name: Run PMD scan
        id: pmd-scan
        run: |
          mkdir -p reports
          echo "Problem,Package,File,Priority,Line,Description,Rule,Ruleset" > reports/pmd-results.csv

          echo "Checking for Apex files..."
          if [ -z "$(find ./force-app/main/default/classes -type f -name '*.cls')" ]; then
            echo "No .cls files found"
          else
            echo "Apex files found:"
            find ./force-app/main/default/classes -type f -name '*.cls'
          fi

          echo "Running PMD..."
          ~/pmd/bin/run.sh pmd -d ./force-app/main/default/classes -R pmd/pmd-ruleset.xml -f csv --force-language apex >> reports/pmd-results.csv || echo "PMD exited with non-zero status"

      - name: Set PMD result output
        id: set-result
        run: |
          if [ -f reports/pmd-results.csv ] && [ $(wc -l < reports/pmd-results.csv) -gt 1 ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Upload PMD report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pmd-report
          path: reports/pmd-results.csv

  deploy-integrate:
    needs: pmd-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.pmd-check.outputs.pmd_status == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      - name: Create JWT Key
        run: |
          mkdir -p JWT
          echo "${{ secrets.SFDC_AUTH_KEY }}" > JWT/server.key
          chmod 600 JWT/server.key

      - name: Deploy to Integrate
        uses: ./.github/actions/deploy-environment
        with:
          instanceUrl: https://login.salesforce.com
          clientId: ${{ secrets.SFDX_INT_CLIENT_ID }}
          username: ulrich.m.ndong.ngomo@empathetic-impala-4d2hgs.com
          keyFilePath: JWT/server.key
          alias: aliasTestCICDOrg
          manifestPath: manifest/package.xml
          testsToRunFile: specifiedTestsClass/testsToRun.txt
          validateOnly: ${{ github.event.inputs.validateOnly }}

  approve-uat:
    needs: deploy-integrate
    runs-on: ubuntu-latest
    environment:
      name: uat-partial-sandbox
      url: https://test.salesforce.com
    steps:
      - name: Wait for UAT approval
        run: echo "UAT deployment approved."

  deploy-uat:
    needs: approve-uat
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      - name: Create JWT Key
        run: |
          mkdir -p JWT
          echo "${{ secrets.SFDC_AUTH_KEY }}" > JWT/server.key
          chmod 600 JWT/server.key

      - name: Deploy to UAT
        uses: ./.github/actions/deploy-environment
        with:
          instanceUrl: https://login.salesforce.com
          clientId: ${{ secrets.SFDX_INT_CLIENT_ID }}
          username: ulrich.m.ndong.ngomo@empathetic-impala-4d2hgs.com
          keyFilePath: JWT/server.key
          alias: aliasTestCICDOrg
          manifestPath: manifest/package.xml
          testsToRunFile: specifiedTestsClass/testsToRun.txt
          validateOnly: ${{ github.event.inputs.validateOnly }}

  approve-prod:
    needs: deploy-uat
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://login.salesforce.com
    steps:
      - name: Wait for Production approval
        run: echo "Production deployment approved."

  deploy-prod:
    needs: approve-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      - name: Create JWT Key
        run: |
          mkdir -p JWT
          echo "${{ secrets.SFDC_AUTH_KEY }}" > JWT/server.key
          chmod 600 JWT/server.key

      - name: Deploy to Production
        uses: ./.github/actions/deploy-environment
        with:
          instanceUrl: https://login.salesforce.com
          clientId: ${{ secrets.SFDX_INT_CLIENT_ID }}
          username: ulrich.m.ndong.ngomo@empathetic-impala-4d2hgs.com
          keyFilePath: JWT/server.key
          alias: aliasTestCICDOrg
          manifestPath: manifest/package.xml
          testsToRunFile: specifiedTestsClass/testsToRun.txt
          validateOnly: ${{ github.event.inputs.validateOnly }}


  # deploy-prod-jwt:
  #   needs: pmd-run
  #   runs-on: ubuntu-latest
  #   if: >
  #     github.event_name == 'workflow_dispatch' &&
  #     github.event.inputs.environment == 'integrate-sandbox' &&
  #     (
  #       github.event.inputs.pmdRequired == 'false' ||
  #       (
  #         github.event.inputs.pmdRequired == 'true' &&
  #         needs.pmd-run.outputs.pmd_status == 'success'
  #       )
  #     )
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18"

  #     - name: Install Salesforce CLI
  #       run: |
  #         wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
  #         mkdir ~/sfdx
  #         tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
  #         echo "$HOME/sfdx/bin" >> $GITHUB_PATH
  #         ~/sfdx/bin/sfdx version

  #     - name: Create JWT key file
  #       run: |
  #         mkdir -p JWT
  #         echo "${{ secrets.SFDC_AUTH_KEY }}" > JWT/server.key
  #         chmod 600 JWT/server.key

  #     - name: Deploy via JWT to Sandbox
  #       uses: ./.github/actions/deploy-environment
  #       with:
  #         instanceUrl: https://login.salesforce.com
  #         clientId: ${{ secrets.SFDX_INT_CLIENT_ID }}
  #         username: ulrich.m.ndong.ngomo@empathetic-impala-4d2hgs.com
  #         keyFilePath: JWT/server.key
  #         alias: aliasTestCICDOrg
  #         manifestPath: manifest/package.xml
  #         testsToRunFile: specifiedTestsClass/testsToRun.txt
  #         validateOnly: ${{ github.event.inputs.validateOnly }}
